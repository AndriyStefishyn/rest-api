// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go
//
// Generated by this command:
//
//	mockgen -source=storage.go -destination=mocks/mock_storage.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	shop "rest-api/internal/shop"

	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// DeleteShopById mocks base method.
func (m *MockStorage) DeleteShopById(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShopById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShopById indicates an expected call of DeleteShopById.
func (mr *MockStorageMockRecorder) DeleteShopById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShopById", reflect.TypeOf((*MockStorage)(nil).DeleteShopById), ctx, id)
}

// GetAllShops mocks base method.
func (m *MockStorage) GetAllShops(ctx context.Context) ([]shop.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllShops", ctx)
	ret0, _ := ret[0].([]shop.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllShops indicates an expected call of GetAllShops.
func (mr *MockStorageMockRecorder) GetAllShops(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllShops", reflect.TypeOf((*MockStorage)(nil).GetAllShops), ctx)
}

// GetShopById mocks base method.
func (m *MockStorage) GetShopById(ctx context.Context, id string) (shop.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShopById", ctx, id)
	ret0, _ := ret[0].(shop.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShopById indicates an expected call of GetShopById.
func (mr *MockStorageMockRecorder) GetShopById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShopById", reflect.TypeOf((*MockStorage)(nil).GetShopById), ctx, id)
}

// InsertShop mocks base method.
func (m *MockStorage) InsertShop(ctx context.Context, shop shop.Shop) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertShop", ctx, shop)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertShop indicates an expected call of InsertShop.
func (mr *MockStorageMockRecorder) InsertShop(ctx, shop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertShop", reflect.TypeOf((*MockStorage)(nil).InsertShop), ctx, shop)
}

// UpdateShop mocks base method.
func (m *MockStorage) UpdateShop(ctx context.Context, shop shop.Shop) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShop", ctx, shop)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateShop indicates an expected call of UpdateShop.
func (mr *MockStorageMockRecorder) UpdateShop(ctx, shop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShop", reflect.TypeOf((*MockStorage)(nil).UpdateShop), ctx, shop)
}
